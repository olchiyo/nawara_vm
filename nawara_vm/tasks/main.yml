---
- name: Ensure requirements in place
  package:
    name:
      - libguestfs-tools
      - python3-libvirt
    state: present
  become: yes

- name: Check if CentOS9 QCOW2 image exists
  ansible.builtin.stat:
    path: "{{ QCOW2_image_dir }}/{{ CentOS9_image_name }}"
  register: centos9_image

- name: Check if CentOS8 QCOW2 image exists
  ansible.builtin.stat:
    path: "{{ QCOW2_image_dir }}/{{ CentOS8_image_name }}"
  register: centos8_image

- name: Check if Rocky8 QCOW2 image exists
  ansible.builtin.stat:
    path: "{{ QCOW2_image_dir }}/{{ Rocky8_image_name }}"
  register: rocky8_image

- name: Check if Ubuntu 20.04 QCOW2 image exists
  ansible.builtin.stat:
    path: "{{ QCOW2_image_dir }}/{{ Ubuntu2004_image_name }}"
  register: ubuntu2004_image

- name: Check if RHEL8 QCOW2 image exists
  ansible.builtin.stat:
    path: "{{ QCOW2_image_dir }}/{{ RHEL8_image_name }}"
  register: rhel8_image

- name: Check if RHEL9 QCOW2 image exists
  ansible.builtin.stat:
    path: "{{ QCOW2_image_dir }}/{{ RHEL9_image_name }}"
  register: rhel9_image

- name: Print check status of CentOS9
  ansible.builtin.debug:
    var: centos9_image
  when: distro == "CentOS9"

- name: Print check status of CentOS8
  ansible.builtin.debug:
    var: centos8_image
  when: distro == "CentOS8"

  - name: Print check status of Rocky8
  ansible.builtin.debug:
    var: rocky8_image
  when: distro == "Rocky8"

- name: Print check status of RHEL8
  ansible.builtin.debug:
    var: rhel8_image
  when: distro == "RHEL8"

- name: Print check status of RHEL9
  ansible.builtin.debug:
    var: rhel9_image
  when: distro == "RHEL9"

- name: Print check status of Ubuntu 20.04
  ansible.builtin.debug:
    var: ubuntu2004_image
  when: distro == "Ubuntu2004"

- name: Download a CentOS9 QCOW2 image if not exists
  ansible.builtin.get_url:
    url: "{{ CentOS9_image_url }}"
    dest: "{{ QCOW2_image_dir }}/{{ CentOS9_image_name }}"
    checksum: "{{ CentOS9_image_checksum }}"
  when: not centos9_image['stat']['exists'] and distro == "CentOS9"

- name: Download a CentOS8 QCOW2 image if not exists
  ansible.builtin.get_url:
    url: "{{ CentOS8_image_url }}"
    dest: "{{ QCOW2_image_dir }}/{{ CentOS8_image_name }}"
    checksum: "{{ CentOS8_image_checksum }}"
  when: not centos8_image['stat']['exists'] and distro == "CentOS8"

- name: Download a Rocky8 QCOW2 image if not exists
  ansible.builtin.get_url:
    url: "{{ Rocky8_image_url }}"
    dest: "{{ QCOW2_image_dir }}/{{ Rocky8_image_name }}"
    checksum: "{{ Rocky8_image_checksum }}"
  when: not rocky8_image['stat']['exists'] and distro == "Rocky8"

- name: Fail if RHEL8 Image does not exist
  ansible.builtin.fail:
    msg: "RHEL8 이미지는 공개적으로 다운로드가 불가능합니다. Red Hat 포털을 통해 이미지를 수동으로 다운 받아주세요"
  when: not rhel8_image['stat']['exists'] and distro == "RHEL8"

- name: Fail if RHEL9 Image does not exist
  ansible.builtin.fail:
    msg: "RHEL9 이미지는 공개적으로 다운로드가 불가능합니다. Red Hat 포털을 통해 이미지를 수동으로 다운 받아주세요"
  when: not rhel9_image['stat']['exists'] and distro == "RHEL9"

- name: Download a Ubuntu 20.04 QCOW2 image if not exists
  ansible.builtin.get_url:
    url: "{{ Ubuntu2004_image_url }}"
    dest: "{{ QCOW2_image_dir }}/{{ Ubuntu2004_image_name }}"
    checksum: "{{ Ubuntu2004_image_checksum }}"
  when: not ubuntu2004_image['stat']['exists'] and distro == "Ubuntu2004"

- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no

- name: Show Current VM List
  ansible.builtin.debug:
    var: existing_vms

- name: Create VM if not exists
  block:
  - name: Check cloud-init Directory if not exists
    ansible.builtin.stat:
      path: "{{ cloud_init_dir }}/{{ vm_name }}"
    register: cloud_init_dir_check
  
  - name: Show if cloud-init directory not exists
    ansible.builtin.debug:
      var: cloud_init_dir_check
    
  - name: Create Metadata Directory if not exists
    ansible.builtin.file:
      path: "{{ cloud_init_dir }}/{{ vm_name }}"
      state: directory
      mode: '0755'
    when: not cloud_init_dir_check['stat']['exists']
  
  - name: Create macaddress 
    ansible.builtin.shell: "printf '52:54:00:%02x:%02x:%02x\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256))"
    register: cmd_macaddress

  - name: Display MAC Address
    ansible.builtin.debug:
      var: cmd_macaddress

  - name: Turn macaddress into a variable
    ansible.builtin.set_fact:
      mac_address01: "{{ cmd_macaddress.stdout | ansible.utils.hwaddr }}"

  - name: Display Mac Address
    ansible.builtin.debug:
      var: mac_address01  
  
  - name: Render meta-data file
    ansible.builtin.template:
      src: meta-data.j2
      dest: "{{ cloud_init_dir }}/{{ vm_name }}/meta-data"

  - name: Render user-data file (CentOS)
    ansible.builtin.template:
      src: user-data-centos.j2
      dest: "{{ cloud_init_dir }}/{{ vm_name }}/user-data"
    when: distro == "CentOS9" or distro == "CentOS8" or distro == "RHEL8" or distro == "RHEL9" or distro == "Rocky8"

  - name: Render user-data file (RHEL)
    ansible.builtin.template:
      src: user-data-rhel.j2
      dest: "{{ cloud_init_dir }}/{{ vm_name }}/user-data"
    when: distro == "RHEL8" or distro == "RHEL9"

  - name: Render user-data file (Ubuntu 20.04)
    ansible.builtin.template:
      src: user-data-ubuntu.j2
      dest: "{{ cloud_init_dir }}/{{ vm_name }}/user-data"
    when: distro == "Ubuntu2004"

  - name: Render network-config file
    ansible.builtin.template:
      src: network-config.j2
      dest: "{{ cloud_init_dir }}/{{ vm_name }}/network-config"

  - name: Create base QCOW2 file (CentOS9)
    ansible.builtin.copy:
      src: "{{ QCOW2_image_dir }}/{{ CentOS9_image_name }}"
      dest: "{{ QCOW2_image_dir }}/{{ vm_name }}.qcow2"
      remote_src: yes
    when: distro == "CentOS9" and recreate_QCOW2_file

  - name: Create base QCOW2 file (CentOS8)
    ansible.builtin.copy:
      src: "{{ QCOW2_image_dir }}/{{ CentOS8_image_name }}"
      dest: "{{ QCOW2_image_dir }}/{{ vm_name }}.qcow2"
      remote_src: yes
    when: distro == "CentOS8" and recreate_QCOW2_file

   - name: Create base QCOW2 file (Rocky8)
    ansible.builtin.copy:
      src: "{{ QCOW2_image_dir }}/{{ Rocky8_image_name }}"
      dest: "{{ QCOW2_image_dir }}/{{ vm_name }}.qcow2"
      remote_src: yes
    when: distro == "Rocky8" and recreate_QCOW2_file
  
  - name: Create base QCOW2 file (RHEL8)
    ansible.builtin.copy:
      src: "{{ QCOW2_image_dir }}/{{ RHEL8_image_name }}"
      dest: "{{ QCOW2_image_dir }}/{{ vm_name }}.qcow2"
      remote_src: yes
    when: distro == "RHEL8" and recreate_QCOW2_file

  - name: Create base QCOW2 file (RHEL9)
    ansible.builtin.copy:
      src: "{{ QCOW2_image_dir }}/{{ RHEL9_image_name }}"
      dest: "{{ QCOW2_image_dir }}/{{ vm_name }}.qcow2"
      remote_src: yes
    when: distro == "RHEL9" and recreate_QCOW2_file

  - name: Create base QCOW2 file (Ubuntu20.04)
    ansible.builtin.copy:
      src: "{{ QCOW2_image_dir }}/{{ Ubuntu2004_image_name }}"
      dest: "{{ QCOW2_image_dir }}/{{ vm_name }}.qcow2"
      remote_src: yes
    when: distro == "Ubuntu2004" and recreate_QCOW2_file

  - name: Resize base QCOW2 file
    ansible.builtin.command: "qemu-img resize {{ QCOW2_image_dir }}/{{ vm_name }}.qcow2 {{ os_disk_size }}"
    when: recreate_QCOW2_file

  - name: create an cloud-init ISO file
    ansible.builtin.command:
      cmd: >
        genisoimage
        -output {{ QCOW2_image_dir }}/{{ vm_name }}.iso
        -volid cidata
        -joliet
        -rock
        {{ cloud_init_dir }}/{{ vm_name }}/user-data
        {{ cloud_init_dir }}/{{ vm_name }}/meta-data
        {{ cloud_init_dir }}/{{ vm_name }}/network-config

  - name: Render XML file for the VM
    ansible.builtin.template:
      src: vm_xml.j2
      dest: "{{ cloud_init_dir }}/{{ vm_name }}/{{ vm_name }}.xml"

  - name: Define VM
    community.libvirt.virt:
      command: define
      xml: "{{ lookup('template', 'vm_xml.j2') }}"
      autostart: yes
  
  when: "vm_name not in existing_vms.list_vms"

- name: Refresh VM List
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no

- name: Ensure VM is started
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 5
  delay: 10
  when: "vm_name in existing_vms.list_vms"


- name: Wait for cloud-init to finish
  ansible.builtin.pause:
    seconds: 90

- name: Ensure VM is shutdown once
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: destroyed
  register: vm_destroyed_results
  until: "vm_destroyed_results is success"
  retries: 5
  delay: 15
  when: "vm_name in existing_vms.list_vms"

- name: Ensure VM is started again
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 10
  when: "vm_name in existing_vms.list_vms"
